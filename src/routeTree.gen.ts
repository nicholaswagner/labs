/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as Import } from './routes/_'
import { Route as SplatImport } from './routes/$'
import { Route as R1IndexImport } from './routes/1/index'
import { Route as TempSplatImport } from './routes/temp/$'
import { Route as Bos04Import } from './routes/bos/04'
import { Route as R2IndexImport } from './routes/_.2/index'
import { Route as Articles1Import } from './routes/_.articles/1'

// Create/Update Routes

const Route = Import.update({
  id: '/_',
  getParentRoute: () => rootRoute,
} as any)

const SplatRoute = SplatImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRoute,
} as any)

const R1IndexRoute = R1IndexImport.update({
  id: '/1/',
  path: '/1/',
  getParentRoute: () => rootRoute,
} as any)

const TempSplatRoute = TempSplatImport.update({
  id: '/temp/$',
  path: '/temp/$',
  getParentRoute: () => rootRoute,
} as any)

const Bos04Route = Bos04Import.update({
  id: '/bos/04',
  path: '/bos/04',
  getParentRoute: () => rootRoute,
} as any)

const R2IndexRoute = R2IndexImport.update({
  id: '/2/',
  path: '/2/',
  getParentRoute: () => Route,
} as any)

const Articles1Route = Articles1Import.update({
  id: '/articles/1',
  path: '/articles/1',
  getParentRoute: () => Route,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatImport
      parentRoute: typeof rootRoute
    }
    '/_': {
      id: '/_'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof Import
      parentRoute: typeof rootRoute
    }
    '/bos/04': {
      id: '/bos/04'
      path: '/bos/04'
      fullPath: '/bos/04'
      preLoaderRoute: typeof Bos04Import
      parentRoute: typeof rootRoute
    }
    '/temp/$': {
      id: '/temp/$'
      path: '/temp/$'
      fullPath: '/temp/$'
      preLoaderRoute: typeof TempSplatImport
      parentRoute: typeof rootRoute
    }
    '/1/': {
      id: '/1/'
      path: '/1'
      fullPath: '/1'
      preLoaderRoute: typeof R1IndexImport
      parentRoute: typeof rootRoute
    }
    '/_/articles/1': {
      id: '/_/articles/1'
      path: '/articles/1'
      fullPath: '/articles/1'
      preLoaderRoute: typeof Articles1Import
      parentRoute: typeof rootRoute
    }
    '/_/2/': {
      id: '/_/2/'
      path: '/2'
      fullPath: '/2'
      preLoaderRoute: typeof R2IndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface RouteChildren {
  Articles1Route: typeof Articles1Route
  R2IndexRoute: typeof R2IndexRoute
}

const RouteChildren: RouteChildren = {
  Articles1Route: Articles1Route,
  R2IndexRoute: R2IndexRoute,
}

const RouteWithChildren = Route._addFileChildren(RouteChildren)

export interface FileRoutesByFullPath {
  '/$': typeof SplatRoute
  '': typeof RouteWithChildren
  '/bos/04': typeof Bos04Route
  '/temp/$': typeof TempSplatRoute
  '/1': typeof R1IndexRoute
  '/articles/1': typeof Articles1Route
  '/2': typeof R2IndexRoute
}

export interface FileRoutesByTo {
  '/$': typeof SplatRoute
  '': typeof RouteWithChildren
  '/bos/04': typeof Bos04Route
  '/temp/$': typeof TempSplatRoute
  '/1': typeof R1IndexRoute
  '/articles/1': typeof Articles1Route
  '/2': typeof R2IndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/$': typeof SplatRoute
  '/_': typeof RouteWithChildren
  '/bos/04': typeof Bos04Route
  '/temp/$': typeof TempSplatRoute
  '/1/': typeof R1IndexRoute
  '/_/articles/1': typeof Articles1Route
  '/_/2/': typeof R2IndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/$' | '' | '/bos/04' | '/temp/$' | '/1' | '/articles/1' | '/2'
  fileRoutesByTo: FileRoutesByTo
  to: '/$' | '' | '/bos/04' | '/temp/$' | '/1' | '/articles/1' | '/2'
  id:
    | '__root__'
    | '/$'
    | '/_'
    | '/bos/04'
    | '/temp/$'
    | '/1/'
    | '/_/articles/1'
    | '/_/2/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  SplatRoute: typeof SplatRoute
  Route: typeof RouteWithChildren
  Bos04Route: typeof Bos04Route
  TempSplatRoute: typeof TempSplatRoute
  R1IndexRoute: typeof R1IndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  SplatRoute: SplatRoute,
  Route: RouteWithChildren,
  Bos04Route: Bos04Route,
  TempSplatRoute: TempSplatRoute,
  R1IndexRoute: R1IndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/$",
        "/_",
        "/bos/04",
        "/temp/$",
        "/1/"
      ]
    },
    "/$": {
      "filePath": "$.tsx"
    },
    "/_": {
      "filePath": "_.tsx",
      "children": [
        "/_/articles/1",
        "/_/2/"
      ]
    },
    "/bos/04": {
      "filePath": "bos/04.tsx"
    },
    "/temp/$": {
      "filePath": "temp/$.tsx"
    },
    "/1/": {
      "filePath": "1/index.tsx"
    },
    "/_/articles/1": {
      "filePath": "_.articles/1.tsx",
      "parent": "/_"
    },
    "/_/2/": {
      "filePath": "_.2/index.tsx",
      "parent": "/_"
    }
  }
}
ROUTE_MANIFEST_END */
